__author__ = 'kanhua'

import unittest
from spectrum_base import spectrum_base
from spectrum_base_update import Spectrum
from photocurrent import gen_square_qe
from ivsolver import calculate_j01_from_qe, calculate_j01, calculate_bed,gen_rec_iv
import numpy as np
import matplotlib.pyplot as plt
import scipy.constants as sc

class MyTestCase(unittest.TestCase):
    def test_gen_rec_iv_from_qe(self):
        """
        Compare the J01 calculated by
        1) calculate_j01_from_qe with unity QE with band edge Eg, the unityQE is generated "manually"
        2) calculate_j01() with band edge Eg
        """

        band_edge = 0.8

        unity_eqe = gen_square_qe(band_edge, 1)

        a = calculate_j01_from_qe(unity_eqe)

        b = calculate_j01(band_edge, 300, 1)

        # print(a)
        # print(b)

        assert np.isclose(a, b)

        test_v = 1.4

        exp_term = np.exp(sc.e * test_v / (sc.k * 300))

        # print(a*exp_term)
        # print(b*exp_term)

        assert np.isclose(a, b)


    def test_gen_rec_iv_from_qe_2(self):
        """
        Compare the J01 calculated by
        1) calculate_j01_from_qe with unity QE with band edge Eg, the unity QE is generated by gen_square_qe
        2) calculate_j01() with band edge Eg
        """

        test_eg=1.1
        qe = gen_square_qe(test_eg, 1, wl_bound=(0.01, 5))

        j0a = calculate_j01_from_qe(qe)
        j0b = calculate_j01(test_eg, 300, 1)

        assert np.isclose(j0a, j0b)

        print("j01 from absorptivity: %s"%j0a)
        print("j01 from band gap: %s"%j0b)


        print("testing the IV from -0.5V to 1V,with jsc=300....")
        test_voltage = np.linspace(-0.5, 1, num=10)

        va,ia=gen_rec_iv(j0a,0,1,2,300,1e10,test_voltage,jsc=300)

        vb,ib=gen_rec_iv(j0b,0,1,2,300,1e10,test_voltage,jsc=300)

        rtol=1e-2
        assert np.all(np.isclose(ia,ib,rtol=rtol))
        print("passed the I-V test, the error is within %s"%rtol)




def plot_calculate_bed():
        qe_wl = np.array([1.1, 5])
        qe_qe = np.array([1, 1])

        unity_eqe = spectrum_base()
        unity_eqe.set_spectrum(qe_wl, qe_qe, x_unit='eV')

        qe = gen_square_qe(1.1, 1, qe_below_edge=0)

        x1, y1 = calculate_bed(qe)
        x2, y2 = calculate_bed(unity_eqe)

        plt.semilogy(x1, y1, hold=True, label='gen_sq_qe')
        plt.semilogy(x2, y2, label="manual")
        plt.close()



if __name__ == '__main__':
    unittest.main()


